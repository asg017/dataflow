#!/usr/bin/env node
const { program } = require("commander");
const { compileNotebook } = require("./compile");
const { runServer } = require("./run");
const {format} = require("./format");

function parseSecrets(values) {
  const secrets = new Map();
  for (const value of values) {
    const colonI = value.indexOf(":");
    if (colonI < 0)
      throw Error(
        `--secret error: colon not found.  syntax: "name:value", found "${value}"`
      );
    secrets.set(
      value.substring(0, colonI),
      value.substring(colonI + 1, value.length)
    );
  }
  return secrets;
}

// TODO
// 1) add --allow-file-attachments permission flag
program
  .version(require("../package.json").version)
  .command("compile <notebook> <outfile>")
  .description(
    "Compile a notebook to a directory into compiled ES modules, File Attachments, runtime/stdlib JS files, and an example index.html."
  )
  .option(
    "--stdlib <path>",
    "Path to JS file that the browser will execute as-is to add to the notebooks builtin variables."
  )
  .option(
    "--target <cells>",
    "Array of cells to 'target' when embeding in the index.html file. Only these cells will be observed."
  )
  .option(
    "--tree-shake <cells>",
    "Tree-shake the compiled output, keeping only cell defintions for the named 'cells' and any cell they depend on. Unused imports and FileAttachments will not be included. 'cells' are comma seperated name of cells to tree shake."
  )
  .option(
    "--include-styling",
    "Whether or not to include the stylesheets that are used in the dataflow run dev server. ",
    false
  )
  .action((inPath, outPath, options) => {
    compileNotebook(inPath, outPath, {
      ...options,
      target: options.target && options.target.split(","),
      treeShake: options.treeShake && options.treeShake.split(","),
    });
  });

  program
  .command("run <notebook>")
  .description(
    "Start a server that runs the given Observable notebook (from a .ojs file)."
  )
  .option(
    "--stdlib <path>",
    "Path to JS file that the browser will execute as-is to add to the notebooks builtin variables."
  )
  .option(
    "--allow-file-attachments",
    "Allow all .ojs notebooks access the filesystem with the FileAttachments feature.",
    false
  )
  .option(
    "--allow-secrets",
    "Allow all .ojs notebooks access to passed in Secrets.",
    false
  )
  .option("--secret, [secret_name:secret_value...]")
  .option("-p, --port <number>", "Port that the server should listen on", 8080)
  .option("--no-open", "Don't open a new browser window on launch")
  .action((notebook, options) => {
    const secrets = parseSecrets(options.secret || []);
    runServer({
      port: +options.port,
      allowFileAttachments: options.allowFileAttachments,
      stdibPath: options.stdlib,
      notebookPath: notebook,
      allowSecrets: options.allowSecrets,
      open: options.open,
      secrets,
    });
  });

  program
  .command("format <notebook>")
  .description(
    "Format a notebook's source with the custom Prettier plugin."
  )
  .option(
    "--write",
    "Over-write the given file with the formatted source.",
    false
  )
  .action((notebook, options) => {
    format(notebook, options);
  });

program.parse(process.argv);
